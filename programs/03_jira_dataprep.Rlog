
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Tabulate statistics and make graphs for the AEA data editor report
> # Originally written by Harry Son
> # 2021-12-30
> 
> # Inputs
> #   - file.path(jiraanon,"jira.anon.RDS") 
> # Outputs
> 
> 
> ### Load libraries 
> ### Requirements: have library *here*
> source(here::here("global-libraries.R"),echo=TRUE)

> options(repos = c(REPO_NAME = "https://packagemanager.rstudio.com/all/__linux__/focal/2021-12-01+MTo2NjQ1NDU1LDI6NDUyNjIxNTtCRjhCNTA0Mw"))

> pkgTest <- function(x) {
+     if (!require(x, character.only = TRUE)) {
+         install.packages(x, dep = TRUE)
+         if (!require(x, charact .... [TRUNCATED] 

> pkgTest.github <- function(libname, source, pkgname = libname) {
+     if (!require(libname, character.only = TRUE)) {
+         if (pkgname == "")  .... [TRUNCATED] 

> global.libraries <- c("dplyr", "here", "tidyr", "tibble", 
+     "stringr", "readr", "splitstackshape", "digest", "remotes", 
+     "readxl", "ggplo ..." ... [TRUNCATED] 

> results <- sapply(as.list(global.libraries), pkgTest)
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: here
here() starts at /home/rstudio
Loading required package: tidyr
Loading required package: tibble
Loading required package: stringr
Loading required package: readr
Loading required package: splitstackshape
Loading required package: digest
Loading required package: remotes
Loading required package: readxl
Loading required package: ggplot2
Loading required package: ggthemes

> pkgTest.github("data.table", "Rdatatable")
Loading required package: data.table

Attaching package: ‘data.table’

The following objects are masked from ‘package:dplyr’:

    between, first, last

[1] "OK"

> pkgTest.github("stargazer", "markwestcott34", "stargazer-booktabs")
Loading required package: stargazer

Please cite as: 

 Hlavac, Marek (2015). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2. http://CRAN.R-project.org/package=stargazer 

[1] "OK"
> source(here::here("programs","config.R"),echo=TRUE)

> process_anon <- TRUE

> download_anon <- TRUE

> firstday <- "2020-12-01"

> lastday <- "2021-11-30"

> basepath <- here::here()

> setwd(basepath)

> jiraanon <- file.path(basepath, "data", "jira", "anon")

> manual <- file.path(basepath, "data", "manual")

> icpsrbase <- file.path(basepath, "data", "icpsr")

> jira.anon.name <- file.path(jiraanon, "jira.anon.RDS")

> jira.anon.sha256 <- "73c92a3ff1d4f5ee5cedd2bf05c5940ca900f621c2e9358bf3e3a3149519ae7c"

> jira.anon.sha512 <- "c8d828bc34bb965a57aab0e4446e0b06b7e55329f0600a4bb8e6d2d75908f4c14340a9f7ea6fe4e6eae103ffdb1d019aab313956be52c6971bf3c89633ecc31 ..." ... [TRUNCATED] 

> jira.anon.urlbase <- "https://raw.githubusercontent.com/AEADataEditor/processing-jira-process-data/698c61395a86df31aa064b843c0e08a67bd64358/data/"

> jira.anon.url <- paste0(jira.anon.urlbase, "anon/jira.anon.RDS")

> jira.members.url <- paste0(jira.anon.urlbase, "replicationlab_members.txt")

> jira.members.name <- file.path(jiraanon, "replicationlab_members.txt")

> noncompliance.name <- file.path(manual, "noncompliance.xlsx")

> scholarone.name <- file.path(basepath, "data", "scholarone", 
+     "dataEditorReport_20201128-20211127Revised.xlsx")

> scholarone.skip <- 33

> images <- file.path(basepath, "images")

> tables <- file.path(basepath, "tables")

> programs <- file.path(basepath, "programs")

> temp <- file.path(basepath, "data", "temp")

> latexnums.Rda <- file.path(tables, "latexnums.Rda")

> latexnums.tex <- file.path(tables, "latexnums.tex")

> for (dir in list(images, tables, programs, temp)) {
+     if (file.exists(dir)) {
+     }
+     else {
+         dir.create(file.path(dir))
+     }
 .... [TRUNCATED] 

> set.seed(20201201)

> pkgTest("tibble")
[1] "OK"

> if (file.exists(latexnums.Rda)) {
+     print(paste0("File for export to LaTeX found: ", latexnums.Rda))
+ } else {
+     latexnums <- tibble(field  .... [TRUNCATED] 
[1] "File for export to LaTeX found: /home/rstudio/tables/latexnums.Rda"

> update_latexnums <- function(field, value) {
+     latexnums <- readRDS(latexnums.Rda)
+     if (any(latexnums$field == field)) {
+         message( .... [TRUNCATED] 
> 
> 
> # Read in data extracted from Jira, anonymized
> 
> if ( file.exists(jira.anon.name) ) {
+   message("File exists, proceeding.")
+ } else {
+   message("Attempting to download file")
+   try(download.file(jira.anon.url,jira.anon.name,mode="wb"))
+   if ( file.exists(jira.anon.name) ) {
+     message("Download successful, proceeding.")
+   } else {
+     stop("Download failed. Please investigate")
+   }
+ }
File exists, proceeding.
> 
> jira.anon <- readRDS(jira.anon.name) 
> #
> # This should be compared to the published version.
> #
> jira.test.chksum <- digest(jira.anon,algo="sha256")
> 
> if ( jira.test.chksum == jira.anon.sha256) {
+   message("SHA256 checksum verified.")
+ } else {
+   stop("SHA256 fails, please verify that you are using the same file. Update config.R if necessary.")
+ }
SHA256 checksum verified.
> 
> # A list of non-issues, typically for information-only
> # This code is not robust, and should be changed at some point.
> jira.pyear <- jira.anon %>%
+   filter(date_created >= firstday, date_created < lastday) %>%
+   cSplit("Changed.Fields",",")  %>%
+   mutate(status_change = ifelse(Changed.Fields_1=="Status","Yes",ifelse(Changed.Fields_2=="Status","Yes",ifelse(Changed.Fields_3=="Status","Yes",ifelse(Changed.Fields_4=="Status","Yes","No"))))) %>%
+   select(-Changed.Fields_1,-Changed.Fields_2,-Changed.Fields_3,-Changed.Fields_4) %>%
+   cSplit("Software.used",",")  %>%
+   filter(status_change=="Yes"|received=="Yes") %>%
+   mutate(subtask_y=ifelse(is.na(subtask),"No",ifelse(subtask!="","Yes",""))) %>%
+   filter(subtask_y=="No") %>%
+   filter(Journal != "AEA P&P") %>% ## Removing all P&P  
+   mutate(reason1=grepl("Discrepancy",reason.failure, ## 8 reasons for failutre to reproduce
+                        fixed = "TRUE"),
+          reason2=grepl("Bugs",reason.failure,
+                        fixed = "TRUE"),
+          reason3=grepl("Insufficient",reason.failure,
+                        fixed = "TRUE"),
+          reason4=grepl("Software",reason.failure,
+                        fixed = "TRUE"),
+          reason5=grepl("functional",reason.failure,
+                        fixed = "TRUE"),
+          reason6=grepl("Data not available",reason.failure,
+                        fixed = "TRUE"),
+          reason6.1=grepl("Data,not,available",reason.failure,
+                          fixed = "TRUE"),
+          reason7=grepl("Data missing",reason.failure,
+                        fixed = "TRUE"),
+          reason7.1=grepl("Data,missing",reason.failure,
+                          fixed = "TRUE"),
+          reason8=grepl("Code missing",reason.failure,
+                        fixed = "TRUE"),
+          reason8.1=grepl("Code,missing",reason.failure,
+                          fixed = "TRUE")) %>% 
+   mutate(reason1=case_when(reason1==TRUE ~ "Discrepancy in Output",
+                            TRUE ~ ""),
+          reason2=case_when(reason2==TRUE ~ "Bugs in code",
+                            TRUE ~ ""),
+          reason3=case_when(reason3==TRUE ~ "Insufficient time available to replicator",
+                            TRUE ~ ""),
+          reason4=case_when(reason4==TRUE ~ "Software not available to replicator",
+                            TRUE ~ ""),
+          reason5=case_when(reason5==TRUE ~ "Code not functional",
+                            TRUE ~ ""),
+          reason6=case_when(reason6==T ~ "Data not available",
+                            reason6.1==T ~ "Data not available",
+                            TRUE ~ ""),
+          reason7=case_when(reason7==T ~ "Data missing",
+                            reason7.1==T ~ "Data missing",
+                            TRUE ~ ""),
+          reason8=case_when(reason8==T ~ "Code missing",
+                            reason8.1==T ~ "Code missing",
+                            TRUE ~ "")) %>%
+   select(-reason6.1,-reason7.1,-reason8.1) 
There were 12 warnings (use warnings() to see them)
> 
> #### Break out of the issues
> jira.issues.breakout <- jira.pyear %>%
+   arrange(desc(row_number())) %>%
+   group_by(ticket) %>%
+   mutate(status_order =  row_number(), st = "Status") %>%
+   mutate(new1 = paste(st, status_order, sep="")) %>%
+   select(ticket,Status,new1) %>%
+   pivot_wider(names_from = new1, values_from = "Status")
> 
> # identifying the list of received tickets
> ji <- jira.pyear %>%
+   select(ticket,Journal) %>%
+   distinct(ticket, .keep_all = TRUE) 
> 
> # identifying the list of issues went through alternate workflow
> ji_alt <- jira.pyear %>%
+   filter(Status == "Alternate"|Status=="Alternate workflow") %>%
+   select(ticket) %>%
+   distinct() %>%
+   mutate(alternate="Yes")
> 
> # identifying the list of submitted issues 
> jis <- jira.pyear %>%
+   filter(Status == "Submitted to MC" & Journal != "AEA P&P") %>%
+   select(ticket) %>%
+   distinct() %>%
+   mutate(submitted="Yes")
> 
> # figure out the final status of the issue as of 12/01/
> jib <- jira.issues.breakout %>%
+   left_join(jis,by="ticket") %>%
+   transform(submitted=ifelse(is.na(submitted),"No",as.character(submitted))) %>%
+   filter(submitted=="No") %>%
+   select(-Status26,-Status27) %>%
+   transform(final_status=ifelse(!is.na(Status25),as.character(Status25),
+                                 ifelse(!is.na(Status24),as.character(Status24),
+                                        ifelse(!is.na(Status23),as.character(Status23),
+                                               ifelse(!is.na(Status22),as.character(Status22),
+                                                      ifelse(!is.na(Status21),as.character(Status21),
+                                                             ifelse(!is.na(Status20),as.character(Status20),
+                                                                    ifelse(!is.na(Status19),as.character(Status19),
+                                                                           ifelse(!is.na(Status18),as.character(Status18),
+                                                                                  ifelse(!is.na(Status17),as.character(Status17),
+                                                                                         ifelse(!is.na(Status16),as.character(Status16),
+                                                                                                ifelse(!is.na(Status15),as.character(Status15),
+                                                                                                       ifelse(!is.na(Status14),as.character(Status14),
+                                                                                                              ifelse(!is.na(Status13),as.character(Status13),
+                                                                                                                     ifelse(!is.na(Status12),as.character(Status12),
+                                                                                                                            ifelse(!is.na(Status11),as.character(Status11),
+                                                                                                                                   ifelse(!is.na(Status10),as.character(Status10),
+                                                                                                                                          ifelse(!is.na(Status9),as.character(Status9),
+                                                                                                                                                 ifelse(!is.na(Status8),as.character(Status8),
+                                                                                                                                                        ifelse(!is.na(Status7),as.character(Status7),
+                                                                                                                                                               ifelse(!is.na(Status6),as.character(Status6),
+                                                                                                                                                                      ifelse(!is.na(Status5),as.character(Status5),
+                                                                                                                                                                             ifelse(!is.na(Status4),as.character(Status4),
+                                                                                                                                                                                    ifelse(!is.na(Status3),as.character(Status3),
+                                                                                                                                                                                           ifelse(!is.na(Status2),as.character(Status2),
+                                                                                                                                                                                                  ifelse(!is.na(Status1),as.character(Status1),"")))))))))))))))))))))))))) %>%
+   select(ticket,final_status)
> 
> # categorize issues: P&P, Submitted, Not yet submitted, Alternate workflow, Others.
> jira.issues.breakout <- jira.issues.breakout %>%  
+   left_join(jis,by="ticket") %>%
+   left_join(ji,by="ticket") %>%
+   left_join(ji_alt,by="ticket") %>%
+   transform(submitted=ifelse(is.na(submitted),"No",as.character(submitted))) %>%
+   transform(alternate=ifelse(is.na(alternate),"No",as.character(alternate))) %>%
+   select(ticket,Journal,submitted,alternate) %>%
+   left_join(jib, by="ticket") %>%
+   transform(outcome=ifelse(Journal=="AEA P&P","P&P",
+                            ifelse(final_status=="Open"|final_status=="Assigned"|final_status=="In Progress"|final_status=="Report Under Review"|final_status=="Write Preliminary Report"|final_status=="Verification"|final_status=="Pre-Approved"|final_status=="Approved"|final_status=="Data"|final_status=="Waiting for info"|final_status=="Waiting for external report","Not yet submitted",
+                                   ifelse(alternate=="Yes","Alternate","Others"))))  %>%
+   transform(outcome=ifelse(submitted=="Yes","Submitted",as.character(outcome)))
> 
> # summarize the breakdown of the cases
> summary.breakout <- jira.issues.breakout %>%  
+   group_by(outcome) %>%
+   summarise(n_outcome = n_distinct(ticket)) 
> 
> ## separate the "Others" case
> jira.others <- jira.issues.breakout %>%
+   filter(outcome=="Others"|outcome=="Alternate") %>%
+   select(ticket) %>%
+   mutate(others="Yes")
> # we will need it again
> 
> ## filter out the "others" case
> jira.pyear <- jira.pyear %>%
+   left_join(jira.others,by="ticket") %>%
+   transform(others=ifelse(is.na(others),"No",as.character(others))) %>%
+   filter(others=="No") 
> 
> # This filters for the cases **submitted** in the past 12 months
> issues_all <- jira.pyear %>%
+   select(ticket) %>%
+   distinct() %>% nrow()
> 
> manuscript_all <- jira.pyear %>%
+   select(mc_number_anon) %>% 
+   distinct() %>% nrow()
> 
> ## Total submitted records
> 
> 
> jira.filter.submitted <- jira.pyear %>%  
+   filter(Status == "Submitted to MC" & Journal != "AEA P&P") 
> 
> # we will re-use these 
> saveRDS(jira.pyear,file=file.path(temp,"jira.pyear.RDS"))
> saveRDS(jira.filter.submitted,file=file.path(temp,"jira.submitted.RDS"))
> saveRDS(jira.others,file=file.path(temp,"jira.others.RDS"))
> 
> 
> # we used the start and end date here, so write them out
> update_latexnums("firstday",firstday)
Updating existing field firstday
> update_latexnums("lastday",lastday)
Updating existing field lastday
> update_latexnums("jiraissues",issues_all)
Updating existing field jiraissues
> update_latexnums("jiramcs",manuscript_all)
Updating existing field jiramcs
> 
> 
